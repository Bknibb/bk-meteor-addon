name: Publish Build
on: push

jobs:
    detect:
        runs-on: ubuntu-latest
        outputs:
            is_release: ${{ steps.extract_version.outputs.is_release }}
            version: ${{ steps.extract_version.outputs.version }}
            description: ${{ steps.extract_version.outputs.description }}

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  persist-credentials: false

            -   name: Determine if commit is a release
                id: extract_version
                run: |
                    is_release=false
                    version=""
                    description=""

                    branch="${GITHUB_REF##*/}"
                    echo "Current branch: $branch"

                    if [ "$branch" = "master" ]; then
                      msg="${{ github.event.head_commit.message }}"

                      # Extract version from the HEAD commit
                      if [[ "$msg" =~ release[[:space:]]v([0-9]+\.[0-9]+\.[0-9]+) ]]; then
                        version="v${BASH_REMATCH[1]}"
                        is_release=true
                        description="$(echo "$msg" | tail -n +2)"
                      fi
                    else
                      # Non-master: scan entire commit range
                      git fetch --no-tags origin "$branch"
                      commits=$(git log --format=%H ${{ github.event.before }}..${{ github.sha }})

                      for sha in $commits; do
                        msg=$(git show -s --format=%s%n%b "$sha")
                        if [[ "$msg" =~ release[[:space:]]v([0-9]+\.[0-9]+\.[0-9]+) ]]; then
                          version="v${BASH_REMATCH[1]}"
                          is_release=true
                          description="$(echo "$msg" | tail -n +2)"
                          break
                        fi
                      done
                    fi

                    echo "is_release=$is_release" >> $GITHUB_OUTPUT
                    echo "version=$version" >> $GITHUB_OUTPUT

                    {
                      echo "description<<EOF"
                      echo "$description"
                      echo "EOF"
                    } >> $GITHUB_OUTPUT
            - name: Validate version in gradle.properties
              if: steps.extract_version.outputs.is_release == 'true'
              run: |
                  expected_version="${{ steps.extract_version.outputs.version }}" # e.g., v1.0.0
                  mod_version="v$(grep '^mod_version=' gradle.properties | cut -d'=' -f2 | tr -d '[:space:]')"

                  echo "Expected version from commit: $expected_version"
                  echo "Version in gradle.properties: $mod_version"

                  if [ "$expected_version" != "$mod_version" ]; then
                    echo "❌ Version mismatch!"
                    echo "Expected: $expected_version"
                    echo "Found in gradle.properties: $mod_version"
                    exit 1
                  else
                    echo "✅ Version matches."
                  fi
    build:
        runs-on: ubuntu-latest
        needs: detect

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
              with:
                  persist-credentials: false

            - name: Set up Gradle
              uses: gradle/actions/setup-gradle@v4

            - name: Set up Java
              uses: actions/setup-java@v4
              with:
                  distribution: 'temurin'
                  java-version: 21

            - name: Build with Gradle
              run: ./gradlew build

            #      - name: Release dev
            #        if: needs.detect.outputs.is_release == 'false'
            #        uses: marvinpinto/action-automatic-releases@latest
            #        with:
            #          repo_token: '${{ secrets.GITHUB_TOKEN }}'
            #          automatic_release_tag: snapshot
            #          prerelease: true
            #          title: Dev Build
            #          files: |
            #            ./build/libs/*.jar
            - name: Upload Artifact
              uses: actions/upload-artifact@v4
              with:
                  name: build
                  path: ./build/libs/*.jar
            - name: Release
              if: needs.detect.outputs.is_release == 'true'
              uses: softprops/action-gh-release@v2
              with:
                  token: '${{ secrets.GITHUB_TOKEN }}'
                  tag_name: ${{ needs.detect.outputs.version }}
                  prerelease: false
                  name: Release ${{ needs.detect.outputs.version }}
                  body: ${{ needs.detect.outputs.description }}
                  files: |
                      ./build/libs/*.jar
            -   name: Notify Discord for early release
                if: needs.detect.outputs.is_release == 'true' && github.ref != 'refs/heads/master'
                env:
                    DISCORD_WEBHOOK: ${{ secrets.EARLY_RELEASES_WEBHOOK }}
                    VERSION: ${{ needs.detect.outputs.version }}
                    NOTES: ${{ needs.detect.outputs.description }}
                run: |
                    BRANCH_NAME=$(echo "${GITHUB_REF##*/}")
                    ROLE_ID="1388798202269929492"

                    JSON=$(jq -n \
                      --arg content "<@&$ROLE_ID>" \
                      --arg name "Release v$VERSION - $BRANCH_NAME" \
                      --arg description "$NOTES" \
                      '{
                        username: "Early Release Bot",
                        avatar_url: "https://cdn.discordapp.com/avatars/870948322515496960/1a2b7ca335b10ecd64699d67e7d4866c.png",
                        content: $content,
                        embeds: [{
                          title: $name,
                          description: $description,
                          color: 65535
                        }]
                      }'
                    )

                    curl -X POST -H "Content-Type: multipart/form-data" \
                      -F "payload_json=$JSON" \
                      -F "file=@./build/libs/$(ls ./build/libs/*.jar | head -n 1)" \
                      "$DISCORD_WEBHOOK"
